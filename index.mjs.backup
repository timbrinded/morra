import { loadStdlib } from "@reach-sh/stdlib";
import * as backend from "./build/index.main.mjs";
const stdlib = loadStdlib(process.env);

const startingBalance = stdlib.parseCurrency(100);

const [accHost, accGuest] = await stdlib.newTestAccounts(2, startingBalance);

console.log("Launching...");
const ctcHost = accHost.contract(backend);
const ctcGuest = accGuest.contract(backend, ctcHost.getInfo());

const getBalance = async (who) => stdlib.formatCurrency(await stdlib.balanceOf(who), 4);

const beforeHost = await getBalance(accHost);
const beforeGuest = await getBalance(accGuest);

const OUTCOME = ["BOB WINS", "DRAW", "ALICE WINS"];

const Player = (Who) => ({
  getSubmission: () => {
    const choice = Math.floor(Math.random() * 5);
    const submission = [choice, choice + Math.floor(Math.random() * 5)];
    console.log(`${Who} played ${submission[0]} fingers and a total of ${submission[1]}.`);
    return submission;
  },
  seeOutcome: (outcome, i) => {
    console.log(`${Who} saw outcome of ${OUTCOME[outcome]} after playing ${i} rounds.`);
  },
  informTimeout: () => {
    console.log(`${Who} has witnessed a time out!!!`);
  },
  informDraw: () => {
    console.log("=== Result was a DRAW, continuining to new round ===");
  },
});

await Promise.all([
  backend.Host(ctcHost, {
    ...stdlib.hasRandom,
    ...Player("Host"),
    wager: stdlib.parseCurrency(5),
    deadline: 10,
  }),
  backend.Guest(ctcGuest, {
    ...stdlib.hasRandom,
    ...Player("Guest"),
    acceptWager: (amt) => {
      console.log(`Guest accepts the wager of ${stdlib.formatCurrency(amt, 4)}`);
    },
  }),
]);

const afterHost = await getBalance(accHost);
const afterGuest = await getBalance(accGuest);

console.log(`Host went from ${beforeHost} to ${afterHost}`);
console.log(`Guest went from ${beforeGuest} to ${afterGuest}`);
